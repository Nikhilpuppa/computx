// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    ALU(x=Dout,y=mux2out,zx=instruction[11],nx=instruction[10],zy=instruction[9],ny=instruction[8],f=instruction[7],no=instruction[6],out=outM,out=ALUout,zr=zr,ng=ng);

    //registers
    ARegister(in=mux1out,load=selA,out=Aout,out[0..14]=addressM);
    DRegister(in=ALUout,load=selD,out=Dout);

    //PC
    PC(in=Aout,load=selPC,inc=true,reset=reset,out[0..14]=pc);

    //muxes
    Mux16(a=ALUout,b=instruction,sel=selmuxA,out=mux1out);
    Mux16(a=Aout,b=inM,sel=selmux2,out=mux2out);


    //control logics
        //selmuxA logic
        Not(in=instruction[15],out=selmuxA);

        //selA logic
        And(a=instC,b=instruction[5],out=temp3);
        Or(a=selmuxA,b=temp3,out=selA);

        //selD logic
        And(a=instruction[15],b=instruction[4],out=selD);

        //selPC logic
        //instruction must be c type
        Not(in=selmuxA,out=instC);
        //JGT condition
            Or(a=zr,b=ng,out=temp1);
            Not(in=temp1,out=positive);
            And(a=instruction[0],b=positive,out=JGT);

        //JEQ condition
            And(a=zr,b=instruction[1],out=JEQ);

        //JLT condition
            And(a=instruction[2],b=ng,out=JLT);

        //JGE condition
            Or(a=JGT,b=JEQ,out=JGE);

        //JNE condition
            Or(a=JGT,b=JLT,out=JNE);

        //JLE condition
            Or(a=JEQ,b=JLT,out=JLE);

        //JMP condition
            Or(a=JGT,b=JLE,out=JMP);
            Or(a=JGT,b=JEQ,out=t1);
            Or(a=JLT,b=t1,out=t2);
            Or(a=JGE,b=t2,out=t3);
            Or(a=JNE,b=t3,out=t4);
            Or(a=JLE,b=t4,out=t5);
            Or(a=JMP,b=t5,out=t6);
            And(a=instC,b=t6,out=selPC);
        
        //selmux2 logic
        And(a=instC,b=instruction[12],out=selmux2);

        //load M logic
        And(a=instC,b=instruction[3],out=loadM,out=writeM);
}
